 // schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  treasures       Treasure[]      @relation("HiddenTreasures") // Relaci√≥n corregida
  comments        Comment[]
  foundTreasures  FoundTreasure[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("userId")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("userId")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Treasure {
  id          String           @id @default(cuid())
  name        String
  description String?
  latitude    Float
  longitude   Float
  hiddenBy    User             @relation("HiddenTreasures", fields: [hiddenById], references: [id], onDelete: Cascade)
  hiddenById  String
  foundBy     FoundTreasure[]
  comments    Comment[]
  createdAt   DateTime         @default(now())
}

model FoundTreasure {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  treasure   Treasure   @relation(fields: [treasureId], references: [id], onDelete: Cascade)
  treasureId String
  foundAt    DateTime   @default(now())
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  treasure   Treasure  @relation(fields: [treasureId], references: [id], onDelete: Cascade)
  treasureId String
  createdAt  DateTime  @default(now())
}